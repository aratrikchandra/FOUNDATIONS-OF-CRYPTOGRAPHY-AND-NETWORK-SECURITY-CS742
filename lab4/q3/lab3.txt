        Cracker has soon enough realized that hacking is a cat and mouse game. After the endsem ended, the sysads did a thorough check and patched up all SQL Injection vulnerable points. And also change the password of "admin" user to more secure password.

Alas! But Cracker is not one to easily give up. She wants admin access to do all kinds of things, like get to know marks of all students!

She browsed the website and noticed a new feedback feature where students can comment on the course and it will be shown in the course details page itself. Is it possible this is vulnerable to XSS attack?

Cracker has Rajesh's credentials ("Rajesh:SecretPwd!") to cover her tracks!
In the first part, she will do some homework and then in the second part she will actually steal the session cookie of the admin, which can permit her to login as admin.

Part-1: Identifying Stored XSS Vulnerability

A simple way to check whether a page has XSS vulnerability is to pop an alert box. Let us try this first. Craft an XSS payload to pop an altert message when you visit the course details page of the course. Note you are still operating using Rajesh’s account. Once alert pops, the same course-details page will give you the flag as well.

Guidance: Here you can alert anything. But to get the flag DO-NOT use any spaces in between your tags and functions. This is the regex used to get the flag: "/<script>alert\(['\"]?.+['\"]?\);<\/script>/"

Submission Details:
- Once you have submitted the XSS payload according to the regex above, you will get flag, submit it in "/home/labDirectory/flag.txt" in "flagPart1" key. It will serve as proof of concept of your work.


Part-2: Stealing cookies using stored XSS vulnerability
Now that you have found a point where you can leverage the XSS vulnerability, let us use it to our advantage and steal the session cookie details of the admin user. The implications of this is, once you get the session cookie of a user, you can use it to login as that user without knowing any username/password (though we will not do this extra step of logging in)



Goal: Create an XSS payload which will get the session cookie of a currently logged in user (e.g. admin when he logs in to see the feedback), and send it to the attacker. 

GUIDANCE:
- Create payload following below document: https://pswalia2u.medium.com/exploiting-xss-stealing-cookies-csrf-2325ec03136e
- The payload you create should send the cookie to some service listening on a port at an IP address. In a real world, this would be some machine in the Internet(Of course attacker's). Here, we will use the lab container and your machine for simulating this scenario, so use your "eth0" or "wlan" network interface related IP address of your machine in the payload.
- To listen on some port on your machine you can use "netcat" using command: nc -lknvp <port>. This basically mimics a service running on the specified port on the machine where the command is run.
- Alternatively, you can host your own HTTP server(Since the request will come from XSS payload as an HTTP request) using Python:
       - For Python3: sudo python3 -m http.server <port>
       - For Python2: sudo python -m SimpleHTTPServer <port>
- You don’t have to model the admin login. Our backend will login as admin and visit the course detail pages every 1 minute. This should trigger a cookie sent to the port you are listening on if your payload was right!

Submission Details:
- Once you have received the admin session cookie details, the flag will be in URL encoded form. Use some online tool to URL decode the flag and submit it in "/home/labDirectory/flag.txt" in "adminFlag" key. It will serve as proof of concept of your work.
      